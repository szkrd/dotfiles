# let's use functions for stuff that I might want to run
# in a script or through tmux (shopt expand_aliases is not always useful)...
function cls() { echo -e "\ec" && clear && printf %"$COLUMNS"s |tr " " "-"; }
function rebash() { [[ -f ~/.bashrc ]] && . ~/.bashrc || . ~/.bash_profile; }
function realias() { unalias -a && rebash; }

# =========================
# LS AND COLORS
# =========================

if [ "$PLATFORM" = "mingw" ] || [ "$PLATFORM" = "linux" ]; then alias ls='ls --color=auto'; fi
alias la='ls -A'
alias l='ls -CF'

# instead of `alias ll='ls -la'` we add some extra colors
# and show dirs first (that's why we need to ls calls)
# (`ll -v` may be useful, since that sort order places dotfiles first)
function ll() {
  ls --color=always -la "$@"| grep '^d' | hilite DARKGRAY '^[@drwx+\-]*'
  LS_COLORS="${LS_COLORS}:fi=35:" ls --color=always -la "$@"| grep -v '^d' | sed '/^total/d' | hilite DARKGRAY '^[@drwx+\-]*'
}

alias decolor="perl -pe 's/\e\[[0-9;]*m(?:\e\[K)?//g'"
alias nocolor='decolor'
alias grep='grep --color=auto'

# colored grep
# usage: `cgrep RED Foobar` the color is from the list in my bashrc
# (all of them should work lower or uppercase, except NOCOLOR of course)
function cgrep() {
  local UP=$(echo $1 | tr a-z A-Z | sed 's/[^A-Z]//g')
  local COLOR=$(eval "echo \$$UP" | sed 's/[^0-9;]//g')
  GREP_COLORS="ms=${COLOR}" egrep --color=always "${@:2}"
}

# print all matches and hilight the grepped text
function hilite() { cgrep $1 -e '^' -e "${@:2}"; }

# use most for man pages (colored output)
if [[ $(command -v most | wc -l) -eq 1 ]]; then
  alias man='PAGER=most man'
fi

# bat is a better cat, has syntax highlighting (use brew to install it);
# let's hide line numbers (vs copy-paste) and some other fancy stuff
alias bat='bat --theme ansi-dark --style=header,grid'

# =========================
# MV, CD, MC, MCD, FCD...
# =========================
# file and history utils

# a slightly better rename - one argument will trigger readline for second
# (see also imv from renameutils or bash Ctrl-W Ctrl-Y Ctrl-Y for single words)
function mv() {
  if [ "$#" -eq 1 ] && [ -e "$1" ]; then
    read -ei "$1" newfilename; command mv -v "${1}" "${newfilename}"; return $?
  fi
  command mv "$@"; return $?
}

# mc and cd trickery (mcd tries to match the param from the mc hotlist and then chdir there)
# (adding "f" as the second param will just do an `&& fcd 1`, because lazyness)
function mdcd() { mkdir -p "$@" && cd "$@"; }
alias md="mdcd"
if [ -f "/usr/lib/mc/mc-wrapper.sh" ]; then alias mc=". /usr/lib/mc/mc-wrapper.sh"; fi
alias ....="cd ../.."
MCD_PREV_DIR=~
function mcd() {
  local AFTER="${2}"
  function __cd() { cd $1; if [ "${AFTER}" = 'f' ] || [ "${AFTER}" = 'fcd' ]; then fcd 1; fi; }
  local ESC=$(printf '\033')
  local SAVE_FILE=/tmp/mcd-pwd
  local MCD_SAVED_DIR=~
  if [ -f "${SAVE_FILE}" ]; then MCD_SAVED_DIR=$(cat /tmp/mcd-pwd); fi
  if [ "${1}" = '-' ]; then __cd $MCD_PREV_DIR; return 0; fi
  if [ "${1}" = '--' ]; then __cd $MCD_SAVED_DIR; return 0; fi
  if [ "${1}" = 'save' ]; then pwd > $SAVE_FILE; return 0; fi
  # you need to have an mc menu file
  local FN=~/.config/mc/hotlist
  if [ ! -f "${FN}" ]; then echo -e "${RED}mc hotlist file missing${NOCOLOR}"; return 1; fi
  # help: list the mc directory hotlist
  if [ -z "${1}" ]; then
    grep ENTRY ${FN} | sed s'/\s*ENTRY "//' | sed "s/\" URL \"/ ${ESC}[1;30m=> /" | sed "s/\"$/${ESC}[0m/"
    echo -e "${DARKGRAY}saved: ${MCD_SAVED_DIR}\nprev: ${MCD_PREV_DIR}${NOCOLOR}" | sed "s/\/home\/$(whoami)/~/g"
    return 0
  fi
  # first try to grep it with `"X "` in the mc hotlist (useful for prefixed lists), then go for a looser grep
  local TARGET=$(grep ENTRY ${FN} | grep "\"${1} " | head -1 | sed 's/.*URL "//' | sed 's/"$//')
  if [ $(echo $TARGET | wc -c) -gt 1 ]; then MCD_PREV_DIR=$(pwd); __cd $TARGET; return 0; fi
  # since "X nnn" was not found (for example `2` with `1 foobar`), let's try "N xxx" (in the `foobar`)
  TARGET=$(grep ENTRY ${FN} | sed 's/\s*ENTRY "[0-9A-Z-]*\s//' | grep "^${1}" | head -1 |sed 's/.*URL "//' | sed 's/"$//')
  if [ $(echo $TARGET | wc -c) -gt 1 ]; then MCD_PREV_DIR=$(pwd); __cd $TARGET; return 0; fi
  __cd $1
}
function _mcd() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local FN=~/.config/mc/hotlist
  if [ ! -f "${FN}" ]; then return 1; fi
  local WORDS=$(grep ENTRY ${FN} | sed 's/\s*ENTRY "[0-9A-Z-]*\s//' | sed 's/[" ].*//' | tr '\n' ' ')
  COMPREPLY=($(compgen -W "save ${WORDS}" -- ${cur}))
  return 0
}
complete -F _mcd mcd
# fzf + cd = fcd DEPTH (always quote, in case we have spaces in the name)
function fcd() {
  cd "$(find . -maxdepth ${1:-1} -path "*/node_modules" -prune -o -type d -print | fzf | xargs echo)"
}
# fzf + history + pbcopy = fhistory (and let's leave ctrl+r as is)
function fhistory() {
  local VAL=$(history | head -n -1 | tac | cut -c 8- | fzf)
  if [ ! -z "${VAL}" ]; then printf "${VAL}" | xclip -i -sel p -f | xclip -i -sel c; fi
}

# =========================
# GIT, YARN, DOCKER, PM2
# =========================

# much short, very magic
alias g="git"
alias y="yarn"
if [ "$PLATFORM" = "mingw" ]; then alias y="node /c/Users/szabi/scoop/apps/yarn/current/Yarn/lib/cli.js"; fi
alias d="docker"
if [ "$PLATFORM" = "mingw" ]; then alias d='winpty docker'; fi
# pm2 wrapper with fzf and shortened commands
#function p() {
#  # (le) list errored, (lg) list grep, (ra) reset all, (da) delete all, (?/f) fuzzy operation, (n) number
#  if [ "${1}" = 'le' ]; then pm2 l | grep -v '│ 0    │'; return 0; fi
#  if [ "${1}" = 'lg' ]; then pm2 l | grep --color=never -Ei "${2}| id  |────────────" | grep -iz ${2}; return 0; fi
#  if [ "${1}" = 'ra' ]; then pm2 reset all; return 0; fi
#  if [ "${1}" = 'da' ]; then pm2 delete all; return 0; fi
#  if [ "${1}" = 'n' ]; then
#    local LINES="$(pm2 list | grep "${2}" | cut -c -78 | sed 's/│//g' | sed 's/default.*//g' | awk '{$1=$1};1' | sed 's/\s/ = /')"
#    if [ "$(wc -l <<< $LINES)" -gt 1 ]; then echo "${LINES}"; fi
#    pm2 list | grep "${2}" | cut -c -11 | sed 's/[^0-9]*//g' | xargs | sed -e 's/ /,/g'
#    return 0
#  fi
#  local FUZZ=0
#  if [ -z "${2}" ]; then
#    # these commands without a second param will trigger fuzzy matching
#    if [ "${1}" = 'start' ] || [ "${1}" = 'stop' ] || [ "${1}" = 'delete' ] || [ "${1}" = 'restart' ]; then FUZZ=1; fi;
#  fi
#  if [ "${2}" = '?' ] || [ "${2}" = 'f' ] || [ "${FUZZ}" -eq 1 ]; then
#    local IDS=$(pm2 list | grep -v WARN | fzf --exact --reverse --multi | sed 's/ //g' | sed 's/│/|/g' | cut -d '|' -f2 | xargs echo)
#    if [ -z "${IDS}" ]; then return 0; fi
#    echo -e "${CYAN}targets:${NOCOLOR} ${IDS} ${CYAN}operation:${NOCOLOR} ${1}"
#    pm2 ${1} ${IDS}
#    return 0
#  fi
#  pm2 $@
#}

# =========================
# NODE, YARN, NVM
# =========================

# npm, nvm and yarn
alias nuke="rm -rf ./node_modules && npm cache clear --force && npm install --no-shrinkwrap --update-binary"
alias npmrd='npm run dev'
alias npmt='npm test'
alias npmrl='npm run lint'
alias npmi='npm install && cp package.json .package.json && git checkout package-lock.json'
alias yadd='y add -D'
alias yins='y install'
alias yrem='y remove'
alias nP='nvm-project'
alias n8='nvm use 8.17.0'
alias n10='nvm use 10.21.0'
alias n12='nvm use 12.18.0'
alias nuse='nvm use'
alias rmnodemodules='rm -rf ./node_modules'

# npm run without parameters will trigger fzf with the list of scripts' section keys
# (`npm run` wo params will list runnable scripts of course, but that's too verbose)
# (the node exec version breaks with nvm version change, for example on 10.22.0)
# (here fzf uses multi with xargs (one line at a time), which is simple, since script names got no spaces,
# but I want it to stop at the first error, that's why I need the shell exec and the special exit code)
function npmr() {
  if [ ! -f "package.json" ]; then echo "no package.json"; return 1; fi
  if [ ! -z "${1}" ]; then command npm run "$@"; return $?; fi
  # local JS="x=require('./package.json');console.log(Object.keys(x.scripts||{}).sort().join('\n'))"
  # local VAL=$(node -e "${JS}" | fzf --tac --multi --cycle)
  local VAL=$(jq '.scripts | keys[]' package.json | sort | sed 's/^"//' | sed 's/"$//' | fzf --tac --multi --cycle)
  local CMD=$(echo $VAL | sed 's/ / \&\& npm run /g' | sed 's/^/npm run /')
  if [ ! -z "$VAL" ]; then
    echo -e "${YELLOW}${CMD}${NOCOLOR}"
    echo "${VAL}" | sed 's/ /\n/g' | xargs -n1 sh -c 'npm run $0 || exit 255';
  fi
}

# change to node version specified by project
function nvm-project() {
  local NVER
  if [ -f ".nvmrc" ]; then
    NVER=$(cat .nvmrc)
    echo -e "${GREEN}nvmrc found, using v${NVER}${NOCOLOR}"
    nvm install $NVER
  else
    # try to use the Dockerfile (for major node version), if we can't, then just use the fall back
    if [ -f "Dockerfile" ]; then
      NVER=$(cat Dockerfile | grep -o "FROM node:[0-9]\+" | sed "s/FROM node://" | head -n1)
      echo -e "${ORANGE}nvmrc NOT found, falling back to Dockerfile, using node v${NVER}${NOCOLOR}"
      nvm install $NVER
    else
      echo -e "${RED}nvmrc/Dockerfile NOT found, sorry${NOCOLOR}"
    fi
  fi
}

# print the current nvm node version in the prompt
function current_node() {
  if [[ $(command -v node | wc -l) -eq 1 ]]; then
    local NVER=$(node -v)
    echo -e " ${CYAN}N:${NVER}${NOCOLOR}"
  fi
}

# prompt: check closest nvmrc vs current node version inside ~/Projects/* directories
# show checkmark if okay, not equal sign for mismatch
function check_node_version() {
  local P=$(pwd | sed "s|^$HOME|~|")
  if [ $(echo $P|grep -c '^~/Projects/') -eq 0 ]; then return; fi
  # current node version without v prefix, taken from nvm symlink
  local NVCURR=$(which node | egrep -o '/v[0-9.]+' | sed 's@/v@@g')
  if [ -z "${NVCURR}" ]; then return; fi;
  local NRCPATH="$(nvm_find_nvmrc)"
  if [ -z "${NRCPATH}" ]; then return; fi
  # required node version (from .nvmrc)
  local NVREQ="$(cat "${NRCPATH}" | sed 's/^v//')"
  if [ -z "${NVREQ}" ]; then return; fi
  # str len of version in nvmrc (excluding eol char)
  local NVERLEN="$(echo "${NVREQ}"|grep -o .|wc -l)"
  local NVCURRTRUNC="$(echo "${NVCURR}"|cut -c -${NVERLEN})"
  if [ "${NVCURRTRUNC}" = "${NVREQ}" ]; then
    echo -e "${GREEN}✔${NOCOLOR}"
  else
    echo -e "${RED}≠${NVREQ}${NOCOLOR}"
  fi
}

# =========================
# EDITORS & COPY-PASTE
# =========================
# nano/na, geany, vscode, pbcopy, pbpaste,
# copy-cat, copy-path, copy-fn

alias nano='nano -w -z -H'
alias na='nano'
alias geany='geany'
if [ "$PLATFORM" = "macos" ]; then alias geany='open -a geany'; fi
if [ "$PLATFORM" = "mingw" ]; then alias geany='/c/Program\ Files\ \(x86\)/Geany/bin/geany.exe'; fi
alias vscode='code'
if [ "$PLATFORM" = "linux" ]; then
  function pbcopy() {
    # pipe = zero parameters & remove colors (and no, afaik -sel pri and -sel clipb.. can not be combined)
    if [ "$#" -eq 0 ]; then cat < /dev/stdin | decolor| head -c -1 | xclip -i -sel p -f | xclip -i -sel c;
      else echo "$@" | head -c -1 | xclip -i -sel p -f | xclip -i -sel c; fi
  }
  function pbpaste() { xclip -selection clipboard -o; }
fi
function copy-contents() { cat "$@" | pbcopy; }
function copy-path() { readlink -f ${@:-.}; readlink -f ${@:-.} | pbcopy; }
alias copy-fn='copy-path'

# =========================
# PROMPT HELPERS
# =========================

# git prompt
function markup_git_branch() {
  if [[ -n $@ ]]; then
    if [[ -z $(git status --porcelain 2> /dev/null) ]]; then
      echo -e " ${GREEN}($@)${NOCOLOR}"
    else
      echo -e " ${RED}($@)${NOCOLOR}"
    fi
  fi
}
function parse_git_branch() {
  git branch --color=never 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/' | sed -e 's/feature/F/'
}

# detect mc subshell in prompt
function is_mc() {
  if [ -n "${MC_SID}" ]; then
    echo -e " ${ORANGE}MC▾${NOCOLOR}"
  fi
}

# =========================
# NAMING THINGS
# =========================
# setting titles (terminal / tmux / msys), controlling tmux
# t/title, tt, titleprefix/tp, tsr, tsr1, ttp

function title() { echo -ne "\033]0;${1}\007"; }
alias t="title"
alias tt="tmux rename-window"
function titleprefix() { TITLEPREFIX="$1"; }
alias tp="titleprefix"
function tmux-split-run() { tmux split-window -dh -t $TMUX_PANE "bash --rcfile <(echo '. ~/.bashrc;$*')"; }
alias tsr="tmux-split-run"
function tmux-split-run1() {
  if [ "$(tmux list-panes | wc -l | cut -d' ' -f1)" -gt 1 ]; then tmux kill-pane -t 2; fi
  tsr "$@"
}
alias tsr1="tmux-split-run1"
# rename tmux pane to param or currend dirname, append pm2 id if possible
function ttp() {
  local NAME="$(basename $(pwd))"
  if [ ! -z "${1}" ]; then NAME="${1}"; fi
  local NUM="$(p n $NAME)"
  if [ "$(wc -c <<< $NUM)" -gt 1 ] && [ "$(wc -l <<< $NUM)" -eq 1 ]; then
    tt "${NAME}.${NUM}"
  else
    tt "${NAME}"
  fi
}

# =========================
# MULTIMEDIA, CONVERSION
# =========================
# jpg2mp4, ytdl, ytdlmp3

function jpg2mp4() { ffmpeg -loop 1 -i "$1" -c:v libx264 -t 15 -pix_fmt yuv420p "$1.mp4"; }
alias ytdl="yt-dlp"
alias ytdlmp3="yt-dlp -x --audio-format mp3"

# =========================
# VACAK
# =========================
# an ancient asus eee pc <3

# for mingw use git sdk shell and `pacman -S expect`
function vacak_mpd() {
  NCMPCPP=1 expect -c '
    spawn ssh -o SendEnv=NCMPCPP szabi@$::env(VACAK_IP) -p1922
    log_user 0
    expect "assword:"; send "$::env(VACAK_PASSWORD)\r"
    interact
  '
}
function vacak_shell() {
  expect -c '
    spawn ssh szabi@$::env(VACAK_IP) -p1922
    log_user 0
    expect "assword:"; send "$::env(VACAK_PASSWORD)\r"
    interact
  '
}
# check if ip address responds in one sec (mostly for functions, but: `islan 192.168.54.20 && echo yes`)
function islan() {
  local OK=$(ping ${1} -4 -n -c 1 -r -q -w 1 | grep ' 0% packet loss' | wc -l)
  if [ "${OK}" -gt 0 ]; then return 0; else return 1; fi
}
# run *local* ncmpcpp (which is okay on linux); use param (c)urrent to get the current song only
function ncmp() {
  if [ $(command -v ncmpcpp | wc -l) -ne 1 ]; then echo "no ncmpcpp?"; return 1; fi
  if ! islan $VACAK_IP; then return 1; fi
  local H="--host ${VACAK_IP}"
  if [ "${1}" = 'c' ] || [ "${1}" = 'current' ]; then ncmpcpp $H --current-song; echo -e "\n"; return 0; fi
  ncmpcpp $H "$@"
}
alias ncmp-current-song="ncmp current"

# =========================
# SYSTEM
# =========================
# s2ram/s2r, xx, df

# only s2ram works reliably
function s2r() { sudo s2ram && slock; }
# df without the snap packages and volatile file systems
function df-h() { df -h -x squashfs -x tmpfs | hilite WHITE '[0-9]+%' | hilite DARKGRAY 'Filesystem.*'; }
# kill by port, use killport 8080 -9
function portkill() { lsof -i:${1} && kill ${2} $(lsof -t -i:${1}) && lsof -i:${1}; }
# who is listening on port (with the executable's args)
function portwho() {
  local PID="$(lsof -i:${1} | grep LISTEN | awk '{ print $2 }' | head -n 1)"
  if [ ! -z "${PID}" ]; then
    local CMD="$(ps -p ${PID} -o args --no-headers)"
    echo -e "PID: ${PID}\nCMD: ${CMD}"
  else
    echo "pid not found (user ${USER}, port ${1})"
    return 1
  fi
}
alias xx="exit"

# =========================
# TESTBED / PJOT ZONE
# =========================

# name this the tmux pane as services, launch mongo left, rabbit right
function rabbimongo() { tt services; mongo40 & tsr1 rabbit; }
function npmlslinks() {
  if [ -d "./node_modules" ]; then
    ll -l node_modules | grep --color=never ^l
  fi
  npm ls -g --depth=0 --link=true 2>&1 | grep -v 'peer dep missing:'
}
